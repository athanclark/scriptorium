name: release

on:
  push:
    tags:
      - "v*"

env:
  BIN_NAME: mnemonic-hasher

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux (x86_64)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          # Windows (x86_64)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
          # macOS Apple Silicon (arm64)
          - os: macos-14
            target: aarch64-apple-darwin
            archive: tar.gz
          # macOS Intel (x86_64)
          - os: macos-13
            target: x86_64-apple-darwin
            archive: tar.gz

    steps:
      - uses: actions/checkout@v4

      # Install Rust toolchain + target
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install pnpm
      - name: Install PNPM & Node
        uses: pnpm/action-setup

      # Cache build artifacts
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref_type == 'tag' }}

      # Install dependencies
      - name: Install pnpm dependencies
        run: pnpm install

      # Build
      - name: Build (release)
        run: NO_STRIP=1 pnpm tauri build --target ${{ matrix.target }}

      # Package: name like mnemonic-hasher-v1.2.3-target.ext
      - name: Prepare dist
        shell: bash
        # FIXME: This might need some work
        run: |
          set -eux
          VERSION="${GITHUB_REF_NAME}"             # v1.2.3
          TARGET="${{ matrix.target }}"
          OUTDIR="src-tauri/target/release"
          DIST="dist"
          mkdir -p "$DIST"

          BIN="${BIN_NAME}"
          # Windows binary has .exe
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            BIN="${BIN}.exe"
          fi

          # Try to strip (where available)
          if command -v strip >/dev/null 2>&1; then
            strip "${OUTDIR}/${BIN}" || true
          fi

          PKG="${BIN_NAME}-${VERSION}-${TARGET}"
          mkdir -p "${PKG}"
          cp "README.md" "${PKG}/" || true
          cp "LICENSE"* "${PKG}/" || true
          cp "${OUTDIR}/${BIN}" "${PKG}/"

          if [[ "${{ matrix.archive }}" == "tar.gz" ]]; then
            tar -czf "${DIST}/${PKG}.tar.gz" "${PKG}"
          else
            # zip (Windows)
            7z a "${DIST}/${PKG}.zip" "${PKG}" >/dev/null
          fi

          echo "DIST_PATH=${DIST}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ env.DIST_PATH }}/*

  release:
    name: publish release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List files
        run: ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/**/*
